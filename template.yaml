AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WebSocket-based Bedrock Chatbot using AWS Lambda & API Gateway

Globals:
  Function:
    Timeout: 60
    Runtime: python3.11
    MemorySize: 256

Resources:

  # S3 Bucket for storing CSV files
  CsvFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-csv-files-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for storing embeddings
  EmbeddingsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-embeddings-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AccidentDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AccidentDataTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH

  # New Similarity Search Lambda Function
  SimilaritySearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-similarity-search"
      Handler: similarity_search.lambda_handler
      CodeUri: similarity_search/
      Environment:
        Variables:
          EMBEDDINGS_BUCKET: !Ref EmbeddingsBucket
          EMBEDDINGS_KEY: "embeddings.json"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "${EmbeddingsBucket.Arn}/*"
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: 
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
              - arn:aws:bedrock:ap-northeast-1::foundation-model/amazon.titan-embed-text-v1

  # Custom resource to upload embeddings
  UploadEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-upload-embeddings"
      Handler: upload_embeddings.lambda_handler
      CodeUri: upload_embeddings/
      Runtime: python3.11
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub "${EmbeddingsBucket.Arn}/*"

  # Custom resource that triggers the upload - simple, no timestamp needed
  UploadEmbeddingsResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt UploadEmbeddingsFunction.Arn
      BucketName: !Ref EmbeddingsBucket

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketConnectIntegration}"

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketDisconnectIntegration}"

  WebSocketSendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "sendMessage"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketSendMessageIntegration}"

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource: 
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource: 
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Environment:
        Variables:
          SIMILARITY_FUNCTION_NAME: !Ref SimilaritySearchFunction
          CSV_BUCKET_NAME: !Ref CsvFilesBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref CsvFilesBucket
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource:     
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt AccidentDataTable.Arn
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt SimilaritySearchFunction.Arn

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations"
      IntegrationMethod: POST

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations"
      IntegrationMethod: POST

  WebSocketSendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations"
      IntegrationMethod: POST

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketSendMessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: production
      DeploymentId: !Ref Deployment

  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ConnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/$connect

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DisconnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/$disconnect

  SendMessageFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendMessageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/sendMessage

Outputs:
  WebSocketURL:
    Description: WebSocket Endpoint
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/production"
  
  CsvFilesBucket:
    Description: S3 Bucket for storing CSV files
    Value: !Ref CsvFilesBucket
    Export:
      Name: !Sub "${AWS::StackName}-CsvFilesBucket"
  
  CsvFilesBucketName:
    Description: S3 Bucket Name for CSV files
    Value: !Ref CsvFilesBucket

  EmbeddingsBucketName:
    Description: S3 Bucket for storing embeddings
    Value: !Ref EmbeddingsBucket
    Export:
      Name: !Sub "${AWS::StackName}-EmbeddingsBucket"

  SimilarityFunctionName:
    Description: Similarity Search Lambda Function Name
    Value: !Ref SimilaritySearchFunction
    Export:
      Name: !Sub "${AWS::StackName}-SimilarityFunction"