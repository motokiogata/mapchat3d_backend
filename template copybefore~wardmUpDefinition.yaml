AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WebSocket-based Bedrock Chatbot using AWS Lambda & API Gateway

Globals:
  Function:
    Timeout: 60
    Runtime: python3.11
    MemorySize: 256

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to use for Fargate tasks
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID to use for Fargate tasks
  DeployTime:
    Type: String
    Default: "0"
    Description: Deployment timestamp to force updates
  ImageTag:                      # <<< ADD
    Type: String
    Default: "latest"
    Description: ECR image tag for deployments

Resources:

  SvgWarmupTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      ContainerDefinitions:
        - Name: svg-warmup
          Image: !Sub "118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/svg-animation-generator:${ImageTag}"
          Command: ["sleep", "43200"]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SvgLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: svg-warmup

  SvgWarmupService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: svg-warmup-service
      Cluster: !Ref FargateCluster
      TaskDefinition: !Ref SvgWarmupTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetId
          SecurityGroups:
            - !Ref FargateSecurityGroup
          AssignPublicIp: ENABLED

  SvgWarmupScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 0
      ResourceId: !Sub "service/${FargateCluster}/${SvgWarmupService.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn: SvgWarmupService

  SvgWarmupScaleUpSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScalableTargetAction:
        MinCapacity: 1
        MaxCapacity: 1
      Schedule: "cron(0 23 ? * SUN-THU *)"
      ScheduledActionName: SvgWarmupScaleUp
      ScalableTargetId: !Ref SvgWarmupScalableTarget

  SvgWarmupScaleDownSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScalableTargetAction:
        MinCapacity: 0
        MaxCapacity: 0
      Schedule: "cron(0 11 ? * MON-FRI *)"
      ScheduledActionName: SvgWarmupScaleDown
      ScalableTargetId: !Ref SvgWarmupScalableTarget


  # Just add this to warm up the cluster/images during business hours
  WarmupTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Same config as FargateTaskDefinition but with a warmup script
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"  # Minimal resources
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      ContainerDefinitions:
        - Name: warmup
          Image: !Sub "118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/field-generator:${ImageTag}"
          Command: ["sleep", "43200"]  # Sleep for 12 hours
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: warmup

  WarmupService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: warmup-service
      Cluster: !Ref FargateCluster
      TaskDefinition: !Ref WarmupTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetId
          SecurityGroups:
            - !Ref FargateSecurityGroup
          AssignPublicIp: ENABLED

  WarmupScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 0
      ResourceId: !Sub "service/${FargateCluster}/${WarmupService.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn: WarmupService

  WarmupScaleUpSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScalableTargetAction:
        MinCapacity: 1
        MaxCapacity: 1
      Schedule: "cron(0 23 ? * SUN-THU *)"  # 8 AM JST
      ScheduledActionName: WarmupScaleUp
      ScalableTargetId: !Ref WarmupScalableTarget

  WarmupScaleDownSchedule:
    Type: AWS::ApplicationAutoScaling::ScheduledAction
    Properties:
      ScalableTargetAction:
        MinCapacity: 0
        MaxCapacity: 0
      Schedule: "cron(0 11 ? * MON-FRI *)"  # 8 PM JST
      ScheduledActionName: WarmupScaleDown
      ScalableTargetId: !Ref WarmupScalableTarget


  ProcessRoadmapFunction:
    Type: AWS::Serverless::Function
    Description: Lambda function to process the roadmap
    Properties:
      FunctionName: !Sub "${AWS::StackName}-process-roadmap"
      Handler: process_roadmap.lambda_handler
      Runtime: python3.11
      Timeout: 120
      MemorySize: 512
      CodeUri: process_roadmap/
      Policies:
        - AmazonECS_FullAccess
        - AmazonS3ReadOnlyAccess
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CLUSTER_NAME: !Ref FargateCluster
          TASK_DEF: !Ref FargateTaskDefinition
          SUBNET_ID: !Ref SubnetId
          SECURITY_GROUP: !Ref FargateSecurityGroup
    DependsOn:
      - FargateTaskDefinition

  FargateCluster:
    Type: AWS::ECS::Cluster

  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Description: Fargate Task Definition for Field Generator
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "2048"
      Memory: "4096"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn 
      ContainerDefinitions:
        - Name: field-generator
          Image: !Sub "118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/field-generator:${ImageTag}"   # <<< MODIFIED
          #Image: 118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/field-generator:latest
          EntryPoint: ["python", "docker-entrypoint.py"]
          Command: []
          Environment:
            - Name: BUCKET_NAME
              Value: !Ref FieldGenOutputBucket
            - Name: CONNECTION_ID
              Value: "will-be-overridden-at-runtime"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
 
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-field-generator"
      RetentionInDays: 7

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Fargate task
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  #Container Argument Parameter
  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"  # ✅ Objects need /*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${FieldGenOutputBucket}"    # ✅ Bucket itself, no /*
        # ADD THIS NEW POLICY FOR BEDROCK ↓
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
                  - "arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0"

  # Add this after your existing FargateTaskDefinition
  SvgAnimationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Description: Fargate Task Definition for SVG Animation Generator
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "1024"  # Less CPU than field generator
      Memory: "2048"  # Less memory than field generator
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      TaskRoleArn: !GetAtt SvgAnimationTaskRole.Arn  # New role with different permissions
      ContainerDefinitions:
        - Name: svg-animation-generator
          #Image: 118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/svg-animation-generator:latest
          Image: !Sub "118028261233.dkr.ecr.ap-northeast-1.amazonaws.com/svg-animation-generator:${ImageTag}"  # <<< ADD
          EntryPoint: ["python", "svg_generator.py"]
          Command: []
          Environment:
            - Name: BUCKET_NAME
              Value: !Ref FieldGenOutputBucket
            - Name: CONNECTION_ID
              Value: "will-be-overridden-at-runtime"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SvgLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: svg-fargate

  # New log group for SVG container
  SvgLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-svg-animation"
      RetentionInDays: 7

  # New task role for SVG container (different permissions)
  SvgAnimationTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${FieldGenOutputBucket}"
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt AccidentDataTable.Arn
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0"
                  - "arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0"


  # S3 Bucket for storing CSV filesAnalyticsFunction:
  CsvFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-csv-files-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for storing field generation output
  FieldGenOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-field-output-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for storing embeddings
  EmbeddingsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-embeddings-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AccidentDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AccidentDataTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH

  # New Similarity Search Lambda Function
  SimilaritySearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-similarity-search"
      Handler: similarity_search.lambda_handler
      CodeUri: similarity_search/
      Environment:
        Variables:
          EMBEDDINGS_BUCKET: !Ref EmbeddingsBucket
          EMBEDDINGS_KEY: "embeddings.json"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${EmbeddingsBucket}/*"
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: 
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
              - arn:aws:bedrock:ap-northeast-1::foundation-model/amazon.titan-embed-text-v1

  # Custom resource to upload embeddings
  UploadEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-upload-embeddings"
      Handler: upload_embeddings.lambda_handler
      CodeUri: upload_embeddings/
      Runtime: python3.11
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub "arn:aws:s3:::${EmbeddingsBucket}/*"

  # Generate the field SVG from lng/lat coordinates invoking google maps API
  GenerateFieldSvgFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-generate-field-svg"
      Handler: generate_svg.lambda_handler
      Runtime: python3.11
      CodeUri: generate_svg/
      MemorySize: 256
      Timeout: 120
      Environment:
        Variables:
          GOOGLE_MAPS_API_KEY: "AIzaSyBgynW3uwnrvXopTghrP10Nht2B-s2WoJ0"
          PROCESS_ROADMAP_FUNCTION: !Sub "${AWS::StackName}-process-roadmap"
          BUCKET_NAME: !Ref FieldGenOutputBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt ProcessRoadmapFunction.Arn
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /generate-field
            Method: POST

  # Function to check if processing is done (note: proper indentation)
    # Function to check if processing is done (note: proper indentation)
  CheckProcessingDoneFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-check-processing-done3"
      Handler: lambda_handler.lambda_handler
      CodeUri: check_processing/
      Runtime: python3.11
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          BUCKET_NAME: !Ref FieldGenOutputBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !Sub "arn:aws:s3:::${FieldGenOutputBucket}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /checkProcessingDone
            Method: POST

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: FieldSvgApi
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Custom resource that triggers the upload - simple, no timestamp needed
  UploadEmbeddingsResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt UploadEmbeddingsFunction.Arn
      BucketName: !Ref EmbeddingsBucket

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketConnectIntegration}"

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketDisconnectIntegration}"

  WebSocketSendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "sendMessage"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketSendMessageIntegration}"

  WebSocketInitConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "initConversation"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketSendMessageIntegration}"

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$default"
      AuthorizationType: NONE
      Target: !Sub "integrations/${WebSocketSendMessageIntegration}" # or a dedicated default integration

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource: 
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource: 
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: hello_world/
      Timeout: 900
      Environment:
        Variables:
          SIMILARITY_FUNCTION_NAME: !Ref SimilaritySearchFunction
          CSV_BUCKET_NAME: !Ref CsvFilesBucket
          ANALYTICS_FUNCTION_NAME: !Ref AnalyticsFunction          # ← ADD THIS LINE
          FIELD_OUTPUT_BUCKET: !Ref FieldGenOutputBucket           # ← ADD THIS LINE
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref CsvFilesBucket
        - Statement:
          - Effect: Allow
            Action:            
            - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/@connections/*
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource:     
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt AccidentDataTable.Arn
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt SimilaritySearchFunction.Arn
              - !GetAtt AnalyticsFunction.Arn  # Add this
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject  # ← Add this for saving results
              - s3:DeleteObject  # ← Add this for cleanup
            Resource:
              - !Sub "arn:aws:s3:::${FieldGenOutputBucket}"
              - !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"

  AnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-analytics"
      Handler: analytics.lambda_handler
      CodeUri: analytics/
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          FIELD_OUTPUT_BUCKET: !Ref FieldGenOutputBucket
          CLUSTER_NAME: !Ref FargateCluster                    # Add this
          SVG_TASK_DEF: !Ref SvgAnimationTaskDefinition        # Add this
          SUBNET_ID: !Ref SubnetId                             # Add this
          SECURITY_GROUP: !Ref FargateSecurityGroup            # Add this
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject  # ← Add this for saving results
              - s3:DeleteObject  # ← Add this for cleanup
            Resource:
              - !Sub "arn:aws:s3:::${FieldGenOutputBucket}"
              - !Sub "arn:aws:s3:::${FieldGenOutputBucket}/*"
          # ADD DYNAMODB PERMISSIONS ↓
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt AccidentDataTable.Arn
          # ADD THIS BEDROCK PERMISSION ↓
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource:
              - !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/apac.anthropic.claude-sonnet-4-20250514-v1:0
              - arn:aws:bedrock:ap-*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0
              # Or use wildcard for all models:
              # - !Sub "arn:aws:bedrock:\${AWS::Region}:\${AWS::AccountId}:inference-profile/*"
          - Effect: Allow
            Action:
              - ecs:RunTask
              - ecs:DescribeTasks
            Resource: 
              - !Ref SvgAnimationTaskDefinition
              - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${FargateCluster}/*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: 
              - !GetAtt FargateExecutionRole.Arn
              - !GetAtt SvgAnimationTaskRole.Arn


  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations"
      IntegrationMethod: POST

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations"
      IntegrationMethod: POST

  WebSocketSendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations"
      IntegrationMethod: POST

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketSendMessageRoute
      - WebSocketInitConversationRoute
      - WebSocketDefaultRoute
      - WebSocketConnectIntegration
      - WebSocketDisconnectIntegration
      - WebSocketSendMessageIntegration
      - InitConversationFunctionPermission
      - DefaultRouteFunctionPermission 
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub "Deployment at ${AWS::StackName}-${AWS::AccountId}"

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: production
      DeploymentId: !Ref Deployment
      DefaultRouteSettings:
        LoggingLevel: INFO
        DataTraceEnabled: true
        DetailedMetricsEnabled: true

  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ConnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/$connect

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DisconnectFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/$disconnect

  SendMessageFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendMessageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/sendMessage

  InitConversationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendMessageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/initConversation
  
  DefaultRouteFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendMessageFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/production/$default

Outputs:
  WebSocketURL:
    Description: WebSocket Endpoint
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/production"
  
  CsvFilesBucket:
    Description: S3 Bucket for storing CSV files
    Value: !Ref CsvFilesBucket
    Export:
      Name: !Sub "${AWS::StackName}-CsvFilesBucket"
  
  CsvFilesBucketName:
    Description: S3 Bucket Name for CSV files
    Value: !Ref CsvFilesBucket

  EmbeddingsBucketName:
    Description: S3 Bucket for storing embeddings
    Value: !Ref EmbeddingsBucket
    Export:
      Name: !Sub "${AWS::StackName}-EmbeddingsBucket"

  SimilarityFunctionName:
    Description: Similarity Search Lambda Function Name
    Value: !Ref SimilaritySearchFunction
    Export:
      Name: !Sub "${AWS::StackName}-SimilarityFunction"

  RestApiUrl:
    Description: "REST API Gateway endpoint URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generate-field"

  FieldGenOutputBucketName:
    Description: S3 Bucket for Fargate output artifacts (road masks, done.flag, etc)
    Value: !Ref FieldGenOutputBucket
    Export:
      Name: !Sub "${AWS::StackName}-FieldGenOutputBucket"